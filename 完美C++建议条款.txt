完美C++建议条款

从C转向C++
1. 尽量用const和inline，而不用#define
2. 尽量用<iostream>，而不用<stdio.h>
3. 尽量用new和delete，而不用malloc和free

内存管理
4. 尽量用C++风格的注释（行末注释）
5. 对应的new和delete要采用相同的形式
6. 析构函数里对指针成员调用delete
7. 预先准备好内存不足的情况
8. 写operator new和operator delete时要遵循常规
9. 避免隐藏标准形式的new
10.如果写了operator new就要同时写operator delete
11.为需要动态内存的类声明一个拷贝构造函数和一个赋值操作符（或者采用引用计数策略）
12.尽量使用初始化，而不要在构造函数里赋值
13.初始化列表中成员列出的顺序和它们在类中声明的顺序相同
14.确保基类有虚析构函数
15.让operator=返回*this的引用（非const引用）
16.在operator=中对所有数据成员赋值
17.在operator=中检查给自己赋值的情况

设计与声明
18.争取使类的接口完整并且最小
19.分清成员函数、非成员函数和友元函数
20.避免public接口出现数据成员
21.尽可能使用const
22.尽量 传引用 而不是 传值
23.必须返回一个对象时不要试图返回一个引用
24.在函数重载和设定参数缺省值间谨慎选择
25.避免对指针和数字类型进行重载
26.当心潜在的二义性
27.如果不想使用隐式生成的函数就要显示禁止它
28.划分全局名字空间

类和函数：实现
29.避免返回内部数据的句柄
30.避免这样的函数：其返回值是指向成员的非const指针或引用，但成员的访问级比这个函数要低
31.千万不要返回局部对象的引用，也不要返回函数内部用new初始化的指针的引用
32.尽可能地推迟变量的定义
33.明智地使用内联
34.将文件间的编译依赖性降至最低

继承和面向对象设计
35.使公有继承体现“是一个”的含义
36.区分接口继承和实现继承
37.决不重新定义继承而来的非虚函数
38.决不重新定义继承而来的缺省参数值
39.避免“向下转换”继承层次
40.通过分层来体现“有一个”或“用。。。来实现”
41.区分继承和模板
42.明智地使用私有继承
43.明智地使用多继承